name: Terraform-EC2/deployment

on: workflow_dispatch

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout GitHub Actions'
        uses: actions/checkout@v4

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.3

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: eu-central-1

      - name: 'Terraform Init'
        run: terraform init
        working-directory: ./ansible-terraform-day3/terraform

      - name: 'Terraform Format'
        run: terraform fmt --check
        working-directory: ./ansible-terraform-day3/terraform

      - name: 'Terraform Validate'
        run: terraform validate
        working-directory: ./ansible-terraform-day3/terraform

      - name: 'Terraform Plan'
        run: terraform plan
        working-directory: ./ansible-terraform-day3/terraform

      - name: 'Terraform Apply'
        run: terraform apply -auto-approve
        working-directory: ./ansible-terraform-day3/terraform
 
      - name: Output EC2 instance IPs
        id: ec2_ips
        run: |
          public_ips=$(terraform output -json public_ips)
          nginx_ec2_ip=$(echo $public_ips | jq -r '.[0]')
          httpd_ec2_ip=$(echo $public_ips | jq -r '.[1]')
          nginx2_ec2_ip=$(echo $public_ips | jq -r '.[2]')
          echo "NGINX_EC2_IP=$nginx_ec2_ip" >> $GITHUB_ENV
          echo "HTTPD_EC2_IP=$httpd_ec2_ip" >> $GITHUB_ENV
          echo "NGINX2_EC2_IP=$nginx2_ec2_ip" >> $GITHUB_ENV
        working-directory: ./ansible-terraform-day3/terraform

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Configure Ansible Inventory, creates two group nginx and httpd
        run: |
          echo "[nginx]" > inventory
          echo "${{ env.NGINX_EC2_IP }}" >> inventory
          echo "${{ env.NGINX2_EC2_IP }}" >> inventory
          echo "[httpd]" >> inventory
          echo "${{ env.HTTPD_EC2_IP }}" >> inventory
          echo "[all:vars]" >> inventory
          echo "ansible_user=ubuntu" >> inventory
          echo "ansible_ssh_private_key_file=/home/runner/.ssh/id_rsa" >> inventory
          echo "ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory
          cat inventory

      - name: Add SSH key
        run: |
          mkdir -p /home/runner/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /home/runner/.ssh/id_rsa
          chmod 700 /home/runner/.ssh
          chmod 600 /home/runner/.ssh/id_rsa
          ssh-keyscan -H github.com >> /home/runner/.ssh/known_hosts
          ssh-keyscan -H ${{ env.NGINX_EC2_IP }} >> /home/runner/.ssh/known_hosts
          ssh-keyscan -H ${{ env.NGINX2_EC2_IP }} >> /home/runner/.ssh/known_hosts
          ssh-keyscan -H ${{ env.HTTPD_EC2_IP }} >> /home/runner/.ssh/known_hosts
          ssh -i /home/runner/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ env.NGINX_EC2_IP }} exit
          ssh -i /home/runner/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ env.NGINX2_EC2_IP }} exit
          ssh -i /home/runner/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ env.HTTPD_EC2_IP }} exit

      - name: Add SSH key to SSH agent
        run: |
          eval "$(ssh-agent -s)"
          ssh-add /home/runner/.ssh/id_rsa

      - name: Install Nginx and Httpd
        run: |
          ansible nginx -i inventory -m apt -a "name=nginx state=present"
          ansible httpd -i inventory -m apt -a "name=apache2 state=present"

      - name: Verify Nginx and Httpd
        run: |
          curl http://${{ env.NGINX_EC2_IP }}
          curl http://${{ env.HTTPD_EC2_IP }}
          curl http://${{ env.NGINX_EC2_IP }}
